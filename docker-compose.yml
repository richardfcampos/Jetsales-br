services:
  migrations:
    build: ./backend
    env_file:
      - ./backend/.env
    depends_on:
      - db
    volumes:
      - ./backend:/app
      - /app/node_modules
    dns:
      - 8.8.8.8
      - 1.1.1.1
    command: ["/bin/bash", "-c", "./wait-for-it.sh db:5432 -- npm run migrate up"]
    networks:
      - app-network
    environment:
      - NODE_ENV=development

  backend:
    build: ./backend
    env_file:
      - ./backend/.env
    ports:
      - "3000:3000"
    depends_on:
      - migrations
      - rabbitmq
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    dns:
      - 8.8.8.8
      - 1.1.1.1
    command: ["/bin/bash", "-c", "./wait-for-it.sh rabbitmq:5672 -- npm start"]
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      # CORS Configuration - uncomment and modify as needed
      # - CORS_ORIGINS=http://localhost:3001,http://127.0.0.1:3001,https://yourdomain.com

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    dns:
      - 8.8.8.8
      - 1.1.1.1
    networks:
      - app-network

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-messages_db}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge 